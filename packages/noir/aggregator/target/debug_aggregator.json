{"debug_symbols":[{"locations":{"0":[{"span":{"start":400,"end":567},"file":1}],"1":[{"span":{"start":717,"end":890},"file":1}]}}],"file_map":{"1":{"source":"use dep::std;\n\nfn main(\n    // left main proof\n    vk : [Field; 114], \n    vk_hash : Field, \n\n    left_proof : [Field; 94],\n    left_public_inputs: [Field; 1],\n    incoming_aggregation : [Field; 16],\n\n    // right main proof\n    right_proof : [Field; 94],\n    right_public_inputs: [Field; 1],\n) -> pub [Field; 16] {\n\n    // now I can use them to verify their proof\n    let intermediate_aggregation = std::verify_proof(\n        vk.as_slice(), \n        left_proof.as_slice(), \n        left_public_inputs.as_slice(), \n        vk_hash, \n        incoming_aggregation\n    );\n\n    // now it's their turn, I hope they fail!\n    // I wrapped my proof in another proof\n    // so I'm essentially verifying my own proof here\n    std::verify_proof(\n        vk.as_slice(), \n        right_proof.as_slice(), \n        right_public_inputs.as_slice(), \n        vk_hash, \n        intermediate_aggregation\n    )\n}\n","path":"/Users/zpedro/Documents/GitHub/progcrypto23-act/packages/noir/aggregator/src/main.nr"}},"warnings":[{"Warning":{"VerifyProof":{"call_stack":[{"span":{"start":400,"end":567},"file":1}]}}},{"Warning":{"VerifyProof":{"call_stack":[{"span":{"start":717,"end":890},"file":1}]}}}]}